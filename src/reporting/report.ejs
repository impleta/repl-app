<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background-color: #f4f6f8;
      color: #333;
      line-height: 1.6;
    }

    .test-runner-output {
      width: 100%;
      margin: 0 auto;
      padding: 5px;
      background-color: #ffffff;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .test-run-info {
      margin-bottom: 5px;
      padding: 10px;
      background-color: #e9ecef;
      border-radius: 6px;
      font-size: 1.1em;
      color: #555;
    }

    .test-report {
      margin-bottom: 15px;
      background-color: #ffffff;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: background-color 0.3s ease;
    }

    .test-report:hover {
      background-color: #f9f9f9;
    }

    .test-output {
      display: table;
      border: 1px solid #ddd;
      border-radius: 6px;
      width: 100%;
    }

    .row {
      display: table-row;
      font-size: 15px;
    }

    .cell {
      display: table-cell;
      vertical-align: top;
      word-wrap: break-word;
      width: 50%;
      font-size: 15px;
    }

    .left {
      border-right: 1px solid #ddd;
      background-color: #f9f9f9;
    }

    code {
      white-space: pre-wrap;
      word-wrap: break-word;
    }

    .line-number {
      padding-right: 10px;
      padding-left: 10px;
      color: #888;
      font-weight: bold;
      width: 30px;
      text-align: right;
      cursor: pointer;
      flex-shrink: 0;
      position: relative;
      user-select: none;
    }

    .line-number:hover {
      text-decoration: underline;
    }

    .line-number::after {
      content: "Click to copy link to this line";
      position: absolute;
      left: 100%;
      top: 50%;
      transform: translateY(-50%);
      margin-left: 10px;
      background-color: #000;
      color: #fff;
      font-size: 0.8em;
      padding: 5px 8px;
      border-radius: 4px;
      white-space: nowrap;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.2s ease, visibility 0.2s ease;
      z-index: 10;
    }

    .line-number:hover::after {
      opacity: 1;
      visibility: visible;
    }

    .failed-message {
      color: #e74c3c;
      font-weight: bold;
      font-size: 15px;
      margin-bottom: 5px;
      padding-left: 10px;
    }

    .succeeded-message {
      color: #2ecc71;
      font-weight: bold;
    }

    .test-title {
      display: block;
      font-size: 1.4em;
      font-weight: bold;
      color: #1d3557;
      margin-left: 5px;
    }

    .test-description {
      display: block;
      font-size: 1.1em;
      color: #495057;
      margin-left: 5px;
    }

    .test-file-path {
      display: block;
      font-size: 0.85em;
      color: #6c757d;
      margin-left: 5px;
      font-style: italic;
    }

    .success {
      background-color: #d4edda;
      border-color: #c3e6cb;
    }

    .failure {
      background-color: #f8d7da;
      border-color: #f5c6cb;
    }

    .test-title-wrapper {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
      margin-bottom: 10px;
    }

    .test-title {
      font-size: 1.4em;
      font-weight: bold;
      color: #1d3557;
      margin-right: 10px;
      flex: 0 1 auto;
    }

    .test-run-time {
      font-size: 1em;
      color: #6c757d;
      flex: 0 1 auto;
      margin-left: 5px;
      position: relative;
      /* For tooltip positioning */
      vertical-align: bottom;
      align-self: flex-end;
    }

    .test-run-time:hover::after {
      content: "Run Time";
      position: absolute;
      bottom: 100%;
      /* Position above the span */
      left: 50%;
      transform: translateX(-50%);
      background-color: #000;
      color: #fff;
      font-size: 0.8em;
      padding: 5px 8px;
      border-radius: 4px;
      white-space: nowrap;
      opacity: 1;
      visibility: visible;
      transition: opacity 0.2s ease, visibility 0.2s ease;
      z-index: 10;
    }

    .test-run-time::after {
      opacity: 0;
      visibility: hidden;
    }

    .test-result {
      font-size: 1.1em;
      font-weight: bold;
      text-align: right;
      color: #007bff;
      margin-left: auto;
      margin-right: 10px;
      padding-right: 10px;
      flex: 0 0 auto;
    }

    .test-result.succeeded {
      color: #4CAF50;
      /* Green for success */
    }

    .test-result.failed {
      color: #e74c3c;
      /* Red for failure */
    }

    .stacktrace-popup {
      position: absolute;
      background: white;
      border: 1px solid #ccc;
      padding: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      overflow-y: auto;
      z-index: 1000;
      width: auto;
      /* Allow width to expand based on content */
      min-width: 400px;
      /* Set a reasonable minimum width */
      /* max-width: 90%; /* Prevent it from being too wide */
      // overflow: hidden;
      // height: 0;
      display: none;
    }


    .stacktrace-popup button {
      display: block;
      margin-left: auto;
      background-color: #e74c3c;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 14px;
    }

    .stacktrace-popup button:hover {
      background-color: #c0392b;
    }

    .failed-message {
      position: relative;
    }

    .with-stacktrace {
      cursor: pointer;
      color: #e74c3c;
      text-decoration: underline;
    }

    .with-stacktrace::after {
      content: "Click to view stacktrace";
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background-color: black;
      color: white;
      font-size: 0.8em;
      padding: 5px 8px;
      border-radius: 4px;
      white-space: nowrap;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.2s ease, visibility 0.2s ease;
    }

    .with-stacktrace:hover::after {
      opacity: 1;
      visibility: visible;
    }
  </style>

  <title>
    <%= runResult.title %>
  </title>
</head>

<body>
  <% 
  function getAssertionResultText(assertionResult) { if(assertionResult.success) { return "<div>&#x200b;</div>" } 
    let stackTrace= '' ; 
    let failedMessageClass = 'failed-message';
    if(assertionResult.showStackTrace) { 
      failedMessageClass += ' with-stacktrace';
      stackTrace =`<div class="stacktrace-popup"><button class="close-btn">Close</button><pre>${assertionResult.error.stack}</pre></div>`; 
    }
    return `<div class="${failedMessageClass}">Failed! ${assertionResult.msg}</div>${stackTrace}`;
    }
    const codeLines = [];
    const assertionLines = [];

    function buildCodeAndAssertions(report) {
    report.lines.forEach((line, index) => {
    const success = report.assertionResults[index].success;

    })
    }

    function getTestResult(succeeded) {
    if (succeeded) {
    return '<span class="test-result succeeded">Succeeded</span>';
    }
    return '<span class="test-result failed">FAILED</span>';
    }

    function getTestSummary() {
    const result = runResult.successfulTestsCount === runResult.totalTests ? 'SUCCEEDED!' : 'FAILED!';
    return ` ${result} ${runResult.successfulTestsCount} of ${runResult.totalTests} tests Succeeded.`;
    }
    %>
    <div class="test-run-summary" hidden><%-getTestSummary() -%> </div>

    <div class="test-runner-output">
      <div class="test-run-info">
        <span>
          <%= `${runResult.successfulTestsCount} of ${runResult.totalTests} tests Succeeded`%>
        </span>
        <span>
          <%= runResult.date %>
        </span>
      </div>
      <% testReports.forEach((report, reportIndex)=> { -%>
        <div class="test-report">
          <div class="test-title-wrapper">
            <span class="test-title">
              <%= report.title %>
            </span>
            <span class="test-run-time">
              <%= report.runTimeFormatted %>
            </span>
            <%- getTestResult(report.success) %>
          </div>
          <span class="test-description">
            <%= report.description %>
          </span>
          <span class="test-file-path">
            <%= report.filePath %>
          </span>
          <div class="test-output">
            <div class="row">
              <% const reportIndexStr=String(reportIndex + 1).padStart(4, '0' ) %>
                <% report.lines.forEach((line, lineIndex)=> { -%>
                  <% const lineIndexStr=String(lineIndex + 1).padStart(4, '0' ) %>
                    <% const lineId=`${reportIndexStr}-${lineIndexStr}` %>
                      <div class="row" id="<%-lineId%>">
                        <div class="cell line-number" data-line-id="<%-lineId%>"><%-lineIndex + 1-%></div>
                        <div class="cell left"><code><%-line%></code></div>
                        <div class="cell"><code><%-getAssertionResultText(report.assertionResults[lineIndex])%></code>
                        </div>
                      </div>
                      <% }); -%>
            </div>
          </div>
        </div>
        <% }); -%>
    </div>
    <script>
      document.addEventListener('click', function (event) {
        if (event.target && event.target.classList.contains('line-number')) {
          const lineId = event.target.dataset.lineId;

          if (lineId) {
            const baseUrl = window.location.href.split('#')[0];
            const lineUrl = `${baseUrl}#${lineId}`;
            navigator.clipboard.writeText(lineUrl);
          }
        }
      });

      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.with-stacktrace').forEach(failedMessage => {
          let stacktraceCell = failedMessage.closest('.cell');
          let stacktracePopup = stacktraceCell.querySelector('.stacktrace-popup'); // Get the sibling popup div

          if (!stacktracePopup || !stacktracePopup.classList.contains('stacktrace-popup')) return;

          failedMessage.addEventListener('click', function () {
            if (stacktracePopup.style.display === 'block') {
              stacktracePopup.style.display = 'none';
            } else {
              let rect = failedMessage.getBoundingClientRect();
              stacktracePopup.style.top = `${rect.bottom + window.scrollY + 5}px`;
              stacktracePopup.style.left = `${rect.left + window.scrollX}px`;
              stacktracePopup.style.display = 'block';
              stacktracePopup.style.width = `${Math.min(stacktraceCell.innerWidth * 0.9, stacktracePopup.scrollWidth)}px`;
            }
          });

          let closeBtn = stacktracePopup.querySelector('.close-btn');
          if (closeBtn) {
            closeBtn.addEventListener('click', () => {
              stacktracePopup.style.display = 'none';
            });
          }
        });
      });
    </script>
</body>

</html>